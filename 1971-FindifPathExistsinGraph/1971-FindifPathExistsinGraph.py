        def dfs(node, visited):
            for neighbor in graph[node]:

            if node == destination:
                return True

            graph[b].append(a)
            graph[a].append(b)
        for a, b in edges:

        graph = defaultdict(list)
    def validPath(self, n: int, edges: List[List[int]], source: int, destination: int) -> bool:
class Solution:
            visited.add(node)

                if neighbor not in visited:
                    if dfs(neighbor, visited):
                        return True
            return False
        return dfs(source, set())
3
